module.exports = {
  overrides: [
    {
      files: ['*.ts', '*.tsx'],
      rules: {
        '@typescript-eslint/no-shadow': ['error', { ignoreTypeValueShadow: true, hoist: 'all' }],
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
        // '@typescript-eslint/consistent-type-definitions': 'error',
        '@typescript-eslint/consistent-type-assertions': 'error',
        '@typescript-eslint/class-literal-property-style': 'error',
        // '@typescript-eslint/ban-types': 'error',
        // '@typescript-eslint/ban-tslint-comment': 'error',
        // '@typescript-eslint/ban-ts-comment': 'error',
        '@typescript-eslint/await-thenable': 'error',
        '@typescript-eslint/array-type': ['error'],
        '@typescript-eslint/adjacent-overload-signatures': 'error',
        '@typescript-eslint/unified-signatures': 'error',
        '@typescript-eslint/unbound-method': 'error',
        '@typescript-eslint/typedef': 'error',
        // '@typescript-eslint/type-annotation-spacing': 'error',
        // '@typescript-eslint/triple-slash-reference': 'error',
        '@typescript-eslint/switch-exhaustiveness-check': 'error',
        '@typescript-eslint/strict-boolean-expressions': ['error', { allowNullableBoolean: true }],
        '@typescript-eslint/restrict-template-expressions': 'error',
        '@typescript-eslint/restrict-plus-operands': 'error',
        // '@typescript-eslint/require-array-sort-compare': 'error',
        '@typescript-eslint/promise-function-async': 'error',
        '@typescript-eslint/prefer-ts-expect-error': 'error',
        '@typescript-eslint/prefer-string-starts-ends-with': 'error',
        '@typescript-eslint/prefer-regexp-exec': 'error',
        '@typescript-eslint/prefer-reduce-type-parameter': 'error',
        // '@typescript-eslint/prefer-readonly-parameter-types': 'error',
        '@typescript-eslint/prefer-readonly': 'error',
        '@typescript-eslint/prefer-optional-chain': 'error',
        '@typescript-eslint/prefer-nullish-coalescing': 'error',
        '@typescript-eslint/prefer-namespace-keyword': 'error',
        // '@typescript-eslint/prefer-literal-enum-member': 'error',
        '@typescript-eslint/prefer-includes': 'error',
        // '@typescript-eslint/prefer-function-type': 'error',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-enum-initializers': 'error',
        '@typescript-eslint/prefer-as-const': 'error',
        // '@typescript-eslint/no-var-requires': 'error',
        '@typescript-eslint/no-unsafe-return': 'error',
        '@typescript-eslint/no-unsafe-member-access': 'error',
        '@typescript-eslint/no-unsafe-call': 'error',
        '@typescript-eslint/no-unsafe-assignment': 'error',
        '@typescript-eslint/no-unnecessary-type-assertion': 'error',
        '@typescript-eslint/no-unnecessary-type-arguments': 'error',
        '@typescript-eslint/no-unnecessary-qualifier': 'error',
        '@typescript-eslint/no-unnecessary-condition': 'error',
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
        // '@typescript-eslint/no-type-alias': 'error',
        '@typescript-eslint/no-throw-literal': 'error',
        '@typescript-eslint/no-this-alias': 'error',
        '@typescript-eslint/no-require-imports': 'error',
        // '@typescript-eslint/no-parameter-properties': 'error',
        '@typescript-eslint/no-non-null-assertion': 'error',
        '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
        '@typescript-eslint/no-namespace': 'error',
        '@typescript-eslint/no-misused-promises': 'error',
        '@typescript-eslint/no-misused-new': 'error',
        '@typescript-eslint/no-invalid-void-type': 'error',
        // '@typescript-eslint/no-inferrable-types': 'error',
        '@typescript-eslint/no-implied-eval': 'error',
        // '@typescript-eslint/no-implicit-any-catch': 'error',
        '@typescript-eslint/no-for-in-array': 'error',
        '@typescript-eslint/no-floating-promises': 'error',
        // '@typescript-eslint/no-extraneous-class': 'error',
        '@typescript-eslint/no-extra-non-null-assertion': 'error',
        '@typescript-eslint/no-explicit-any': [
          'error',
          {
            // fixToUnknown: true,
            ignoreRestArgs: true,
          },
        ],
        '@typescript-eslint/no-empty-interface': 'error',
        '@typescript-eslint/no-dynamic-delete': 'error',
        '@typescript-eslint/no-confusing-non-null-assertion': 'error',
        '@typescript-eslint/no-base-to-string': 'error',
        '@typescript-eslint/explicit-module-boundary-types': 'error',
        // '@typescript-eslint/member-delimiter-style': 'error',
        '@typescript-eslint/method-signature-style': ['error', 'property'],
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'interface',
            format: ['PascalCase'],
            custom: {
              regex: '^I[A-Z]',
              match: true,
            },
          },
          {
            selector: 'class',
            format: ['PascalCase'],
          },
          {
            selector: 'typeLike',
            format: ['PascalCase'],
            custom: {
              regex: '^I[A-Z]',
              match: true,
            },
          },
          {
            selector: 'variable',
            types: ['boolean'],
            format: ['PascalCase'],
            prefix: ['is', 'should', 'has', 'can', 'did', 'will'],
          },
          {
            selector: 'typeParameter',
            format: ['PascalCase'],
          },
          {
            selector: 'enum',
            format: ['PascalCase'],
          },
        ],
        '@typescript-eslint/member-ordering': 'error',
        '@typescript-eslint/consistent-type-imports': [
          'error',
          { disallowTypeAnnotations: true, prefer: 'no-type-imports' },
        ],
        '@typescript-eslint/explicit-function-return-type': ['error', { allowExpressions: true }],
        '@typescript-eslint/explicit-member-accessibility': ['error', { accessibility: 'explicit' }],
      },
    },
  ],
}
